{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256; \n\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address public immutable i_owner;\n    \n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmount;\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \" Not enough money send :( \");\n        funders.push(msg.sender);\n        addressToAmount[msg.sender] += msg.value;\n    }\n\n    function withdraw() public OnlyOwner{\n        for(uint256 i=0; i < funders.length; i++ ){\n            address funder = funders[i];\n            addressToAmount[funder] = 0;\n        }\n        //reseting funders Array to empty:\n        funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Transaction failed due to some error\");\n\n    }\n\n    modifier OnlyOwner(){\n        //require(msg.sender == i_owner, \"You are not the Owner of contract\");\n        if(msg.sender != i_owner){\n            revert NotOwner();\n        }\n        _;\n    }\n\n    receive() external payable{\n        fund();\n    }\n\n    fallback() external payable{\n        fund();\n    }\n    \n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        // ABI\n        // address : 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        //Eth in USD\n        // in 8 decimals\n        return (uint256)(price * 1e10);\n    }\n\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n\n        return ethAmountInUSD;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}